package com.example.my01;

import android.annotation.SuppressLint;
import android.content.Intent;
import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.View;

import androidx.activity.result.ActivityResultLauncher;
import androidx.activity.result.contract.ActivityResultContracts;
import androidx.appcompat.app.AppCompatActivity;
import androidx.fragment.app.Fragment;
import android.text.InputType;
import android.view.MotionEvent;

import android.util.Log;
import android.widget.Toast;
import com.example.my01.databinding.ActivityMainBinding;
import com.google.android.gms.auth.api.signin.GoogleSignIn;
import com.google.android.gms.auth.api.signin.GoogleSignInAccount;
import com.google.android.gms.auth.api.signin.GoogleSignInClient;
import com.google.android.gms.auth.api.signin.GoogleSignInOptions;
import com.google.android.gms.tasks.Task;
import com.google.firebase.FirebaseApp;
import com.google.firebase.auth.AuthCredential;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.auth.FirebaseUser;
import com.google.firebase.auth.GoogleAuthProvider;
import com.google.android.gms.common.api.ApiException;
import com.google.android.material.bottomnavigation.BottomNavigationView;

public class MainActivity extends AppCompatActivity {

    ActivityMainBinding binding;
    private static final int RC_SIGN_IN = 123; // Request code for Google Sign-In
    private GoogleSignInClient googleSignInClient;
    private FirebaseAuth firebaseAuth;

    @SuppressWarnings("deprecation")
    @SuppressLint("ClickableViewAccessibility")
    @Override

    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        FirebaseApp.initializeApp(this);
        Log.d("FirebaseInit", "Firebase initialized successfully");
        Log.d("GoogleSignIn", "GoogleSignInOptions initialized");
        Log.d("GoogleSignIn", "Sign-in intent launched");
        Log.d("GoogleSignIn", "FirebaseAuth initialized");



        googleSignInLauncher = registerForActivityResult(
                new ActivityResultContracts.StartActivityForResult(),
                result -> {
                    if (result.getResultCode() == RESULT_OK) {
                        Intent data = result.getData();
                        if (data != null) {
                            Task<GoogleSignInAccount> task = GoogleSignIn.getSignedInAccountFromIntent(data);
                            try {
                                GoogleSignInAccount account = task.getResult(ApiException.class);
                                if (account != null) {
                                    firebaseAuthWithGoogle(account.getIdToken());
                                }
                            } catch (ApiException e) {
                                Log.w("GoogleSignIn", "Google sign-in failed", e);
                                Toast.makeText(this, "Google Sign-In failed", Toast.LENGTH_SHORT).show();
                            }
                        }
                    }
                }
        );

        // Check if the user is logged in
        boolean isLoggedIn = checkLoginStatus();

        if (!isLoggedIn) {
            // Inflate the login layout
            binding = ActivityMainBinding.inflate(getLayoutInflater());
            setContentView(binding.getRoot());

            // Configure Google Sign-In
            @SuppressWarnings("deprecation")
            GoogleSignInOptions gso = new GoogleSignInOptions.Builder(GoogleSignInOptions.DEFAULT_SIGN_IN)
                    .requestIdToken("771854821872-v5h6dgrj8b943pljja3e0on8fjufuacl.apps.googleusercontent.com")
                    .requestEmail()
                    .build();

            googleSignInClient = GoogleSignIn.getClient(this, gso);


            // Initialize FirebaseAuth
            firebaseAuth = FirebaseAuth.getInstance();

            // Set up Google Sign-In button
            binding.googleSignInButton.setOnClickListener(v -> signInWithGoogle());

            // Implement show/hide password functionality
            binding.passwordEditText.setOnTouchListener((v, event) -> {
                if (event.getAction() == MotionEvent.ACTION_UP) { // Handle touch release
                    if (event.getRawX() >= (binding.passwordEditText.getRight() - binding.passwordEditText.getCompoundDrawables()[2].getBounds().width())) {
                        // Call performClick for accessibility compliance
                        v.performClick();

                        // Toggle password visibility
                        if (binding.passwordEditText.getInputType() == (InputType.TYPE_CLASS_TEXT | InputType.TYPE_TEXT_VARIATION_PASSWORD)) {
                            binding.passwordEditText.setInputType(InputType.TYPE_CLASS_TEXT | InputType.TYPE_TEXT_VARIATION_VISIBLE_PASSWORD);
                            binding.passwordEditText.setCompoundDrawablesWithIntrinsicBounds(0, 0, R.drawable.hide_password, 0); // Show eye icon
                        } else {
                            binding.passwordEditText.setInputType(InputType.TYPE_CLASS_TEXT | InputType.TYPE_TEXT_VARIATION_PASSWORD);
                            binding.passwordEditText.setCompoundDrawablesWithIntrinsicBounds(0, 0, R.drawable.password, 0); // Hide eye icon
                        }

                        // Keep cursor at the end
                        binding.passwordEditText.setSelection(binding.passwordEditText.getText().length());
                        return true;
                    }
                }
                return false;
            });


            // Handle login actions here
            binding.loginButton.setOnClickListener(v -> {
                String email = binding.emailEditText.getText().toString().trim();
                String password = binding.passwordEditText.getText().toString().trim();

                // Validate email and password
                if (email.isEmpty()) {
                    binding.emailEditText.setError("Email is required");
                    binding.emailEditText.requestFocus();
                    return;
                }

                if (!android.util.Patterns.EMAIL_ADDRESS.matcher(email).matches()) {
                    binding.emailEditText.setError("Enter a valid email address");
                    binding.emailEditText.requestFocus();
                    return;
                }

                if (password.isEmpty()) {
                    binding.passwordEditText.setError("Password is required");
                    binding.passwordEditText.requestFocus();
                    return;
                }

                // Navigate to next screen
                navigateToBottomNavigation();
            });
        } else {
            // Navigate to the main page
            navigateToBottomNavigation();
        }
    }

    private ActivityResultLauncher<Intent> googleSignInLauncher;

    private void signInWithGoogle() {
        Intent signInIntent = googleSignInClient.getSignInIntent();
        googleSignInLauncher.launch(signInIntent);
    }

    private void firebaseAuthWithGoogle(String idToken) {
        AuthCredential credential = GoogleAuthProvider.getCredential(idToken, null);
        firebaseAuth.signInWithCredential(credential)
                .addOnCompleteListener(this, task -> {
                    if (task.isSuccessful()) {
                        FirebaseUser user = firebaseAuth.getCurrentUser();
                        if (user != null) {
                            // Navigate to the main screen
                            navigateToBottomNavigation();
                        }
                    } else {
                        Log.w("GoogleSignIn", "Firebase authentication failed", task.getException());
                        Toast.makeText(this, "Authentication failed", Toast.LENGTH_SHORT).show();
                    }
                });
    }


    private boolean checkLoginStatus() {
        // Replace with actual login status check (e.g., FirebaseAuth, SharedPreferences)
        return false; // Default to not logged in
    }

    private void navigateToBottomNavigation() {
        // Inflate the bottom_navigation layout
        View bottomNavigationViewLayout = LayoutInflater.from(this).inflate(R.layout.bottom_navigation, null);
        setContentView(bottomNavigationViewLayout);

        // Set up BottomNavigationView
        BottomNavigationView bottomNavigationView = bottomNavigationViewLayout.findViewById(R.id.bottomNavigationView);

        // Load the default fragment (HomeFragment)
        getSupportFragmentManager()
                .beginTransaction()
                .replace(R.id.frame_layout, new HomeFragment())
                .commit();

        // Handle navigation item selection
        bottomNavigationView.setOnItemSelectedListener(item -> {
            int itemId = item.getItemId();

            if (itemId == R.id.home) {
                replaceFragment(new HomeFragment());
                return true;
            } else if (itemId == R.id.screener) {
                replaceFragment(new ScreenerFragment());
                return true;
            } else if (itemId == R.id.watchlist) {
                replaceFragment(new WatchlistFragment());
                return true;
            } else if (itemId == R.id.idea) {
                replaceFragment(new IdeaFragment());
                return true;
            } else if (itemId == R.id.profile) {
                replaceFragment(new ProfileFragment());
                return true;
            }
            return false;
        });


    }

    // Utility method to replace fragments
    private void replaceFragment(Fragment fragment) {
        getSupportFragmentManager()
                .beginTransaction()
                .replace(R.id.frame_layout, fragment)
                .commit();
    }





}
